
### This is what a single run through the pipeline looks like, for one family:

- convert fasta file to list format
- remove dashes from all sequences 
- **cd-hit clustering:** to reduce the number of sequences in the family
- plot length distribution of the family
- 0th alignment step: aligning sequences generated after cd-hit step 
- Inside the while loop (inside the function iterate in the Consensus class):
	- if any condition for breaking the loop is met (check_break_conditions function for more details)
		- save the current alignment(write_file) to refined_file
		- save the consensus sequence (realign consensus if that strategy is selected) in a file
		- generate a profile hmm from the **refined_alignment**
		- use this **profile hmm** to **emit** N sequences (N is the number of sequences in the refined alignment)
		- align **hmm emitted sequences** with the refined alignment to generate a **combined_alignment**
		- split the combined alignment to get the hmm alignment and repeat the same as above on this alignment
		- break while loop
	- find a **profile matrix** from 'sequences' ('sequences' is the list format of sequences in write_file)
	- find a **consensus sequence** using 'sequences' and **profile matrix** 
	- find **bad sequences**
	- remove **bad sequences**
	- convert 'sequences' back to fasta format (temp_file)
	- remove dashes from temp_file and write output to out_file
	- align sequences in out_file and write output to write_file
	- find length of alignment  
-Inside call_matlab in the DCA class
	- call the matlab DCA program taking the refined alignment, hmm alignment, refined consensus and HMM consensus as the inputs
	(output is a DCA energy plot)

### Description of the profile matrix function
- (a profile matrix tells the probability of finding an amino acid at each position of the alignment)
- function profile_matrix(sequences_from_alignment):
	- pm = {}: keys are amino acids, including a dash. value for a key is a list. the length of this list is the length of the alignment
	(length of alignment = length of any sequence in sequencse_from_alignment)
	- intially pm[amino_acid] = [0 for 0 in range(length of alignment)]
	- for iter from 0 to length of sequences_from_alignment
		- current_sequence = sequences_from_alignment[iter]
		- for position from 0 to length of alignment
			- current_amino_acid = current_sequence[position]
			- pm[current_amino_acid][position] += 1 (increasing the frequeny of current amino acid at position
	- for amino_acid in pm:
		- values_of_amino_acid_key = pm[amino_acid]
		- for value in values_of_amino_acid_key:
			- value = value/number_of_sequences (number_of_sequences = length of sequences_from_alignment)
			
	- return pm
	
### Description of the consensus sequence calculation function
- (finds an average sequence from all sequences in an alignment. it's an average because from each position, it takes the amino acid with the highest probability at that position)
- consensus_sequence = ''
- function consensus_sequence(pm, sequences_from_alignment):
	- for position from 0 to length of alignment:
		- current_list_of_probabilities = list()
		- for amino_acid in profile_matrix:
			- current_list_of_probabilities += [pm[amino_acid][position]]
		- max_value_for_this_position = max(current_list_of_probabilities)
		- max_indices = get a all indices in from current_list_of_probabilities which have max_value_for_this_position
		- max_index = max_indices[0]
		- if amino_acid[max_index] == '-' (if the highest probability amino acid at position is a dash '-')
			 - max_value = current_list_of_probabilities[max_index]
			 - if max_value < 0.5 (and if this highest probability is less than 0.5)
			 	- then find the second_largest_value in current_list_of_probabilities (this second largest probability should correspond to an amino acid, not a dash)
			 	- if second_largest_value == max_value:
			 		- max_index = max_indices[1]
			 	- else
			 		- max_index = index of second largest value in current_list_of_probabilities
			 - else (= if max_value > 0.5 i.e if '-' has a probability greater than 0.5)
			 	- continue
		- consensus_sequence += amino_acids[max_index] (where amino_acids = ['-', 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y'])
		- Note: make sure than the keys(amino_acids) in pm are in the same order as they are in amino_acids list.

### Some important points

- You must have noticed that the refined_consensus is generated without dashes. The refined_consensus is realigned to the refined_alignment to get back the dashes. I call this **strategy 1** of getting the refined_consensus
- There is another strategy, **strategy 2**: just get the refined_consensus with the dashes. 
- refined_consensuses from both strategies should be more or less the same right? or at least have similar dca energies? But this is not what we are observing. The refined_consensus from strategy 2 has very high dca energy for all families that I tested. Doesn't make any sense. That's why we thought that there's a big somewhere. 
 
PS - 1. The consensus function is a bit different in that it has two options - consensus with dashes and consensus without dashes
     2. check out the for_kalyani.pptx file in the repository. It has a very nice flowchart made by Varun and should help you understand the pipeline better.
     3. Send me an email if you have any questions! (kasthana@uci.edu)
